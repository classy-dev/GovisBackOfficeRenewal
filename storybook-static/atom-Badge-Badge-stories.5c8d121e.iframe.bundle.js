"use strict";(self.webpackChunkgovis_renewal=self.webpackChunkgovis_renewal||[]).push([[1355],{"./component/atom/Badge/Badge.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,TextBadgeCase:()=>TextBadgeCase,default:()=>Badge_stories});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),index_esm=__webpack_require__("./node_modules/react-icons/fi/index.esm.js"),StoryLayout=__webpack_require__("./component/modules/story_layout/StoryLayout.tsx"),emotion_styled_base_browser_esm=__webpack_require__("./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js"),emotion_react_browser_esm=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js");var colors={red:{name:"1c5hnf",styles:"color:var(--color-red50);background:var(--color-red90)"},blue:{name:"boqf27",styles:"color:var(--color-blue70);background:var(--color-blue90)"},yellow:{name:"1vjz710",styles:"color:var(--color-yellow50);background:var(--color-yellow90)"},orange:{name:"zq8v66",styles:"color:var(--color-orange70);background:var(--color-red90)"}},TextBadgeWrap=(0,emotion_styled_base_browser_esm.Z)("div",{target:"eky0cw90"})("display:inline-flex;align-items:center;height:2.6rem;padding:0 0.4rem;font-size:1.6rem;font-weight:500;border-radius:0.4rem;",(function(props){return colors[props.color]}),";span{display:-webkit-box;-webkit-line-clamp:1;-webkit-box-orient:vertical;overflow:hidden;text-overflow:ellipsis;white-space:normal;}"),TextBadge=function TextBadge(_ref){var text=_ref.text,color=_ref.color;return(0,emotion_react_browser_esm.tZ)(TextBadgeWrap,{color},(0,emotion_react_browser_esm.tZ)("span",null,text))};try{TextBadge.displayName="TextBadge",TextBadge.__docgenInfo={description:"",displayName:"TextBadge",props:{text:{defaultValue:null,description:"",name:"text",required:!1,type:{name:"string"}},color:{defaultValue:null,description:"",name:"color",required:!0,type:{name:"enum",value:[{value:'"red"'},{value:'"yellow"'},{value:'"blue"'},{value:'"orange"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["component/atom/Badge/TextBadge.tsx#TextBadge"]={docgenInfo:TextBadge.__docgenInfo,name:"TextBadge",path:"component/atom/Badge/TextBadge.tsx#TextBadge"})}catch(__react_docgen_typescript_loader_error){}var _Default$parameters,_Default$parameters2,_Default$parameters2$,_TextBadgeCase$parame,_TextBadgeCase$parame2,_TextBadgeCase$parame3,Badge=__webpack_require__("./component/atom/Badge/Badge.tsx");const Badge_stories={title:"Atoms/Badge",tags:["autodocs"],args:{TotalProps:{props:"variant(필수값), size(기본값,md)"}},parameters:{storySource:{source:'import _objectSpread from "/Users/yun-eunseog/workspace/govis-renewal/node_modules/@babel/runtime/helpers/esm/objectSpread2.js";\nimport _extends from "/Users/yun-eunseog/workspace/govis-renewal/node_modules/@babel/runtime/helpers/esm/extends.js";\nvar _Default$parameters, _Default$parameters2, _Default$parameters2$, _TextBadgeCase$parame, _TextBadgeCase$parame2, _TextBadgeCase$parame3;\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn\'t supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }\n\n// @ts-nocheck\nimport React from \'react\';\nimport { FiArrowRight, FiStar } from \'react-icons/fi\';\nimport { css } from \'@emotion/react\';\nimport StoryLayout from \'@ComponentFarm/modules/story_layout/StoryLayout\';\nimport { TextBadge } from \'@ComponentFarm/atom/Badge/TextBadge\';\nimport { Badge } from \'./Badge\';\nimport { jsx as ___EmotionJSX } from "@emotion/react";\nvar meta = {\n  title: \'Atoms/Badge\',\n  tags: [\'autodocs\'],\n  args: {\n    TotalProps: {\n      props: "variant(\\uD544\\uC218\\uAC12), size(\\uAE30\\uBCF8\\uAC12,md)"\n    }\n  },\n  parameters: {\n    docs: {\n      story: {\n        inline: true\n      },\n      // render the story in an iframe\n      canvas: {\n        sourceState: \'shown\'\n      },\n      // start with the source open\n      source: {\n        type: \'code\'\n      } // forces the raw source code (rather than the rendered JSX).\n    }\n  }\n};\n\nexport default meta;\nvar color = [\'green\', \'yellow\', \'indigo\', \'blue\', \'red\', \'gray\'];\nvar _ref6 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref7 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref8 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dW4tZXVuc2VvZy93b3Jrc3BhY2UvZ292aXMtcmVuZXdhbC9jb21wb25lbnQvYXRvbS9CYWRnZS9CYWRnZS5zdG9yaWVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5SW1CIiwiZmlsZSI6Ii9Vc2Vycy95dW4tZXVuc2VvZy93b3Jrc3BhY2UvZ292aXMtcmVuZXdhbC9jb21wb25lbnQvYXRvbS9CYWRnZS9CYWRnZS5zdG9yaWVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2Rlc3RydWN0dXJpbmctYXNzaWdubWVudCAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNZXRhLCBTdG9yeSB9IGZyb20gJ0BzdG9yeWJvb2svcmVhY3QnO1xuaW1wb3J0IHsgRmlBcnJvd1JpZ2h0LCBGaVN0YXIgfSBmcm9tICdyZWFjdC1pY29ucy9maSc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgU3RvcnlMYXlvdXQgZnJvbSAnQENvbXBvbmVudEZhcm0vbW9kdWxlcy9zdG9yeV9sYXlvdXQvU3RvcnlMYXlvdXQnO1xuaW1wb3J0IHsgVGV4dEJhZGdlIH0gZnJvbSAnQENvbXBvbmVudEZhcm0vYXRvbS9CYWRnZS9UZXh0QmFkZ2UnO1xuaW1wb3J0IHsgQmFkZ2UsIEJhZGdlUHJvcHMgfSBmcm9tICcuL0JhZGdlJztcbmNvbnN0IG1ldGE6IE1ldGEgPSB7XG4gIHRpdGxlOiAnQXRvbXMvQmFkZ2UnLFxuICB0YWdzOiBbJ2F1dG9kb2NzJ10sXG4gIGFyZ3M6IHtcbiAgICBUb3RhbFByb3BzOiB7XG4gICAgICBwcm9wczogYHZhcmlhbnQo7ZWE7IiY6rCSKSwgc2l6ZSjquLDrs7jqsJIsbWQpYFxuICAgIH1cbiAgfSxcbiAgcGFyYW1ldGVyczoge1xuICAgIGRvY3M6IHtcbiAgICAgIHN0b3J5OiB7XG4gICAgICAgIGlubGluZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8vIHJlbmRlciB0aGUgc3RvcnkgaW4gYW4gaWZyYW1lXG4gICAgICBjYW52YXM6IHtcbiAgICAgICAgc291cmNlU3RhdGU6ICdzaG93bidcbiAgICAgIH0sXG4gICAgICAvLyBzdGFydCB3aXRoIHRoZSBzb3VyY2Ugb3BlblxuICAgICAgc291cmNlOiB7XG4gICAgICAgIHR5cGU6ICdjb2RlJ1xuICAgICAgfSAvLyBmb3JjZXMgdGhlIHJhdyBzb3VyY2UgY29kZSAocmF0aGVyIHRoYW4gdGhlIHJlbmRlcmVkIEpTWCkuXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZXRhO1xuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgQmFkZ2VQcm9wcyB7XG4gIGRhcmtNb2RlOiBib29sZWFuO1xufVxuY29uc3QgY29sb3IgPSBbJ2dyZWVuJywgJ3llbGxvdycsICdpbmRpZ28nLCAnYmx1ZScsICdyZWQnLCAnZ3JheSddO1xuY29uc3QgU3RvcnlCYWRnZTogU3Rvcnk8UHJvcHM+ID0gYXJncyA9PiB7XG4gIHJldHVybiA8U3RvcnlMYXlvdXQgey4uLmFyZ3N9IGN1c3RvbUNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgJiA+IHNwYW4gKyBzcGFuIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxLjI1cmVtOyAvKiBDb3JyZXNwb25kcyB0byBzcGFjZS15LTUgaW4gVGFpbHdpbmQgQ1NTICovXG4gICAgICAgIH1cbiAgICAgIGB9PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAgPEJhZGdlIGNvbG9yPVwib3JhbmdlXCIgc2l6ZT1cImNpcmNsZVwiPlxuICAgICAgICAgIE5cbiAgICAgICAgPC9CYWRnZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBkb3Qgc2l6ZT1cImxnXCI+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBkb3Q+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVwic21cIiBkb3Q+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgey8qIGRvdCDsl4bsnYTrlYwgKi99XG4gICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PlxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IHNpemU9XCJsZ1wiPlxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICA8L0JhZGdlPil9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH0+XG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVwic21cIj5cbiAgICAgICAgICAgIGxhYmVsXG4gICAgICAgICAgPC9CYWRnZT4pfVxuICAgICAgPC9kaXY+XG4gICAgICB7LyogZG90IOyXhuydhOuVjCAqL31cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH0+XG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZmlsbD1cIm91dGxpbmVcIj5cbiAgICAgICAgICAgIGxhYmVsXG4gICAgICAgICAgPC9CYWRnZT4pfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PlxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IGRvdCBmaWxsPVwib3V0bGluZVwiPlxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICA8L0JhZGdlPil9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH0+XG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZmlsbD1cInRyYW5zcGFyZW50XCIgZG90PlxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICA8L0JhZGdlPil9XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAgPEJhZGdlIExlYWRpbmdJY29uPXs8RmlTdGFyIC8+fT7sspjrpqwg7KSRPC9CYWRnZT5cbiAgICAgICAgPEJhZGdlIHsuLi5hcmdzfSBMZWFkaW5nSWNvbj17PGltZyBzcmM9XCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS90YWlsd2luZGNzcy9pbWFnZS91cGxvYWQvdjE2MzUyNzkyNzcvbmxfdHB5MmFiLnN2Z1wiIGFsdD1cIm5sXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgLz59PlxuICAgICAgICAgIExhYmVsXG4gICAgICAgIDwvQmFkZ2U+XG4gICAgICAgIDxCYWRnZSB7Li4uYXJnc30gVHJhaWxpbmdJY29uPXs8RmlBcnJvd1JpZ2h0IC8+fT5cbiAgICAgICAgICBMYWJlbFxuICAgICAgICA8L0JhZGdlPlxuICAgICAgICA8QmFkZ2Ugc2l6ZT1cImxnXCIgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XG4gICAgICAgICAgZXJyb3IsIHNtXG4gICAgICAgIDwvQmFkZ2U+XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIDxCYWRnZSB2YXJpYW50PVwibnVtYmVyaW5nXCIgc2l6ZT1cInhzXCI+XG4gICAgICAgIDFcbiAgICAgICA8L0JhZGdlPlxuICAgICAgIDxCYWRnZSB2YXJpYW50PVwiYmxhY2tcIiBzaXplPVwic21cIiB0ZXh0V2hpdGU+XG4gICAgICAgIOyymOumrCDspJFcbiAgICAgICA8L0JhZGdlPlxuICAgICAgIDxCYWRnZSB7Li4uYXJnc30+7LKY66asIOykkTwvQmFkZ2U+XG4gICAgICAgPEJhZGdlIHZhcmlhbnQ9XCJncmF5XCI+7LKY66asIOykkTwvQmFkZ2U+XG4gICAgICAgPEJhZGdlIHZhcmlhbnQ9XCJzdWNjZXNzXCIgc2l6ZT1cImxnXCIgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59PlxuICAgICAgICBURVhUXG4gICAgICAgPC9CYWRnZT5cbiAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IExlYWRpbmdJY29uPXs8RmlTdGFyIC8+fT5cbiAgICAgICAgTGFiZWxcbiAgICAgICA8L0JhZGdlPlxuICAgICAgIDxCYWRnZVxuICAgICAgICB7Li4uYXJnc31cbiAgICAgICAgTGVhZGluZ0ljb249e1xuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL3RhaWx3aW5kY3NzL2ltYWdlL3VwbG9hZC92MTYzNTI3OTI3Ny9ubF90cHkyYWIuc3ZnXCJcbiAgICAgICAgICAgIGFsdD1cIm5sXCJcbiAgICAgICAgICAgIHdpZHRoPVwiMTZcIlxuICAgICAgICAgICAgaGVpZ2h0PVwiMTZcIlxuICAgICAgICAgIC8+XG4gICAgICAgIH1cbiAgICAgICA+XG4gICAgICAgIExhYmVsXG4gICAgICAgPC9CYWRnZT5cbiAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XG4gICAgICAgIExhYmVsXG4gICAgICAgPC9CYWRnZT5cbiAgICAgICA8QmFkZ2VcbiAgICAgICAgdmFyaWFudD1cImVycm9yXCJcbiAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59XG4gICAgICAgIFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn1cbiAgICAgICA+XG4gICAgICAgIGVycm9yLCBzbVxuICAgICAgIDwvQmFkZ2U+ICovfVxuICAgIDwvU3RvcnlMYXlvdXQ+O1xufTtcbmV4cG9ydCBjb25zdCBEZWZhdWx0ID0gU3RvcnlCYWRnZS5iaW5kKHt9KTtcbkRlZmF1bHQuYXJncyA9IHtcbiAgc2l6ZTogJ21kJyxcbiAgZGFya01vZGU6IGZhbHNlXG59O1xuRGVmYXVsdC5wYXJhbWV0ZXJzID0ge1xuICBjb250cm9sczoge1xuICAgIGV4Y2x1ZGU6IFsnTGVhZGluZ0ljb24nLCAnVHJhaWxpbmdJY29uJywgJ2NsYXNzTmFtZSddXG4gIH1cbn07XG5jb25zdCBTdG9yeVRleHRCYWRnZTogU3Rvcnk8UHJvcHM+ID0gYXJncyA9PiB7XG4gIHJldHVybiA8U3RvcnlMYXlvdXQgey4uLmFyZ3N9IGN1c3RvbUNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgJiA+IHNwYW4gKyBzcGFuIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxLjI1cmVtOyAvKiBDb3JyZXNwb25kcyB0byBzcGFjZS15LTUgaW4gVGFpbHdpbmQgQ1NTICovXG4gICAgICAgIH1cbiAgICAgIGB9PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgICBgfT5cbiAgICAgICAgPFRleHRCYWRnZSB0ZXh0PVwi7Yag66eI7YagIOyGjOyKpCDrqbTsoIFcIiBjb2xvcj1cInJlZFwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxUZXh0QmFkZ2UgdGV4dD1cIjEwMOygkH43MOygkFwiIGNvbG9yPVwiYmx1ZVwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxUZXh0QmFkZ2UgdGV4dD1cIjcw7KCQfjUw7KCQXCIgY29sb3I9XCJ5ZWxsb3dcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgICAgIGB9PlxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XCI1MOygkH4w7KCQXCIgY29sb3I9XCJvcmFuZ2VcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9TdG9yeUxheW91dD47XG59O1xuZXhwb3J0IGNvbnN0IFRleHRCYWRnZUNhc2UgPSBTdG9yeVRleHRCYWRnZS5iaW5kKHt9KTtcbkRlZmF1bHQucGFyYW1ldGVycyA9IHtcbiAgLi4uRGVmYXVsdC5wYXJhbWV0ZXJzLFxuICBkb2NzOiB7XG4gICAgLi4uRGVmYXVsdC5wYXJhbWV0ZXJzPy5kb2NzLFxuICAgIHNvdXJjZToge1xuICAgICAgb3JpZ2luYWxTb3VyY2U6IFwiYXJncyA9PiB7XFxuICByZXR1cm4gPFN0b3J5TGF5b3V0IHsuLi5hcmdzfSBjdXN0b21Dc3M9e2Nzc2BcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICYgPiBzcGFuICsgc3BhbiB7XFxuICAgICAgICAgIG1hcmdpbi10b3A6IDEuMjVyZW07IC8qIENvcnJlc3BvbmRzIHRvIHNwYWNlLXktNSBpbiBUYWlsd2luZCBDU1MgKi9cXG4gICAgICAgIH1cXG4gICAgICBgfT5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAgPEJhZGdlIGNvbG9yPVxcXCJvcmFuZ2VcXFwiIHNpemU9XFxcImNpcmNsZVxcXCI+XFxuICAgICAgICAgIE5cXG4gICAgICAgIDwvQmFkZ2U+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjc3M9e2Nzc2BcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICB9XFxuICAgICAgICBgfT5cXG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZG90IHNpemU9XFxcImxnXFxcIj5cXG4gICAgICAgICAgICBsYWJlbFxcbiAgICAgICAgICA8L0JhZGdlPil9XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjc3M9e2Nzc2BcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICB9XFxuICAgICAgICBgfT5cXG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZG90PlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVxcXCJzbVxcXCIgZG90PlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICB7LyogZG90IFxcdUM1QzZcXHVDNzQ0XFx1QjU0QyAqL31cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVxcXCJsZ1xcXCI+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9PlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVxcXCJzbVxcXCI+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIHsvKiBkb3QgXFx1QzVDNlxcdUM3NDRcXHVCNTRDICovfVxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IGZpbGw9XFxcIm91dGxpbmVcXFwiPlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBkb3QgZmlsbD1cXFwib3V0bGluZVxcXCI+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IGZpbGw9XFxcInRyYW5zcGFyZW50XFxcIiBkb3Q+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICA8QmFkZ2UgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59PlxcdUNDOThcXHVCOUFDIFxcdUM5MTE8L0JhZGdlPlxcbiAgICAgICAgPEJhZGdlIHsuLi5hcmdzfSBMZWFkaW5nSWNvbj17PGltZyBzcmM9XFxcImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL3RhaWx3aW5kY3NzL2ltYWdlL3VwbG9hZC92MTYzNTI3OTI3Ny9ubF90cHkyYWIuc3ZnXFxcIiBhbHQ9XFxcIm5sXFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMTZcXFwiIC8+fT5cXG4gICAgICAgICAgTGFiZWxcXG4gICAgICAgIDwvQmFkZ2U+XFxuICAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XFxuICAgICAgICAgIExhYmVsXFxuICAgICAgICA8L0JhZGdlPlxcbiAgICAgICAgPEJhZGdlIHNpemU9XFxcImxnXFxcIiBMZWFkaW5nSWNvbj17PEZpU3RhciAvPn0gVHJhaWxpbmdJY29uPXs8RmlBcnJvd1JpZ2h0IC8+fT5cXG4gICAgICAgICAgZXJyb3IsIHNtXFxuICAgICAgICA8L0JhZGdlPlxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIHsvKiA8QmFkZ2UgdmFyaWFudD1cXFwibnVtYmVyaW5nXFxcIiBzaXplPVxcXCJ4c1xcXCI+XFxuICAgICAgICAxXFxuICAgICAgIDwvQmFkZ2U+XFxuICAgICAgIDxCYWRnZSB2YXJpYW50PVxcXCJibGFja1xcXCIgc2l6ZT1cXFwic21cXFwiIHRleHRXaGl0ZT5cXG4gICAgICAgIFxcdUNDOThcXHVCOUFDIFxcdUM5MTFcXG4gICAgICAgPC9CYWRnZT5cXG4gICAgICAgPEJhZGdlIHsuLi5hcmdzfT5cXHVDQzk4XFx1QjlBQyBcXHVDOTExPC9CYWRnZT5cXG4gICAgICAgPEJhZGdlIHZhcmlhbnQ9XFxcImdyYXlcXFwiPlxcdUNDOThcXHVCOUFDIFxcdUM5MTE8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2UgdmFyaWFudD1cXFwic3VjY2Vzc1xcXCIgc2l6ZT1cXFwibGdcXFwiIExlYWRpbmdJY29uPXs8RmlTdGFyIC8+fT5cXG4gICAgICAgIFRFWFRcXG4gICAgICAgPC9CYWRnZT5cXG4gICAgICAgPEJhZGdlIHsuLi5hcmdzfSBMZWFkaW5nSWNvbj17PEZpU3RhciAvPn0+XFxuICAgICAgICBMYWJlbFxcbiAgICAgICA8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2VcXG4gICAgICAgIHsuLi5hcmdzfVxcbiAgICAgICAgTGVhZGluZ0ljb249e1xcbiAgICAgICAgICA8aW1nXFxuICAgICAgICAgICAgc3JjPVxcXCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS90YWlsd2luZGNzcy9pbWFnZS91cGxvYWQvdjE2MzUyNzkyNzcvbmxfdHB5MmFiLnN2Z1xcXCJcXG4gICAgICAgICAgICBhbHQ9XFxcIm5sXFxcIlxcbiAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXG4gICAgICAgICAgICBoZWlnaHQ9XFxcIjE2XFxcIlxcbiAgICAgICAgICAvPlxcbiAgICAgICAgfVxcbiAgICAgICA+XFxuICAgICAgICBMYWJlbFxcbiAgICAgICA8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XFxuICAgICAgICBMYWJlbFxcbiAgICAgICA8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2VcXG4gICAgICAgIHZhcmlhbnQ9XFxcImVycm9yXFxcIlxcbiAgICAgICAgc2l6ZT1cXFwibGdcXFwiXFxuICAgICAgICBMZWFkaW5nSWNvbj17PEZpU3RhciAvPn1cXG4gICAgICAgIFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn1cXG4gICAgICAgPlxcbiAgICAgICAgZXJyb3IsIHNtXFxuICAgICAgIDwvQmFkZ2U+ICovfVxcbiAgICA8L1N0b3J5TGF5b3V0PjtcXG59XCIsXG4gICAgICAuLi5EZWZhdWx0LnBhcmFtZXRlcnM/LmRvY3M/LnNvdXJjZVxuICAgIH1cbiAgfVxufTtcblRleHRCYWRnZUNhc2UucGFyYW1ldGVycyA9IHtcbiAgLi4uVGV4dEJhZGdlQ2FzZS5wYXJhbWV0ZXJzLFxuICBkb2NzOiB7XG4gICAgLi4uVGV4dEJhZGdlQ2FzZS5wYXJhbWV0ZXJzPy5kb2NzLFxuICAgIHNvdXJjZToge1xuICAgICAgb3JpZ2luYWxTb3VyY2U6IFwiYXJncyA9PiB7XFxuICByZXR1cm4gPFN0b3J5TGF5b3V0IHsuLi5hcmdzfSBjdXN0b21Dc3M9e2Nzc2BcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICYgPiBzcGFuICsgc3BhbiB7XFxuICAgICAgICAgIG1hcmdpbi10b3A6IDEuMjVyZW07IC8qIENvcnJlc3BvbmRzIHRvIHNwYWNlLXktNSBpbiBUYWlsd2luZCBDU1MgKi9cXG4gICAgICAgIH1cXG4gICAgICBgfT5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgYH0+XFxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XFxcIlxcdUQxQTBcXHVCOUM4XFx1RDFBMCBcXHVDMThDXFx1QzJBNCBcXHVCQTc0XFx1QzgwMVxcXCIgY29sb3I9XFxcInJlZFxcXCIgLz5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgYH0+XFxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XFxcIjEwMFxcdUM4MTB+NzBcXHVDODEwXFxcIiBjb2xvcj1cXFwiYmx1ZVxcXCIgLz5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgYH0+XFxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XFxcIjcwXFx1QzgxMH41MFxcdUM4MTBcXFwiIGNvbG9yPVxcXCJ5ZWxsb3dcXFwiIC8+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjc3M9e2Nzc2BcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcXG4gICAgICAgIGB9PlxcbiAgICAgICAgPFRleHRCYWRnZSB0ZXh0PVxcXCI1MFxcdUM4MTB+MFxcdUM4MTBcXFwiIGNvbG9yPVxcXCJvcmFuZ2VcXFwiIC8+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvU3RvcnlMYXlvdXQ+O1xcbn1cIixcbiAgICAgIC4uLlRleHRCYWRnZUNhc2UucGFyYW1ldGVycz8uZG9jcz8uc291cmNlXG4gICAgfVxuICB9XG59OyJdfQ== */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref9 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref10 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref11 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref12 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref13 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref14 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref15 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref16 = process.env.NODE_ENV === "production" ? {\n  name: "1a7i5qx",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;}"\n} : {\n  name: "1t0z8ab-StoryBadge",\n  styles: "display:flex;margin-bottom:10px;span{margin-right:10px;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref17 = process.env.NODE_ENV === "production" ? {\n  name: "15uhzwb",\n  styles: "display:inline-flex;flex-direction:column;&>span+span{margin-top:1.25rem;}"\n} : {\n  name: "1ovhp7u-StoryBadge",\n  styles: "display:inline-flex;flex-direction:column;&>span+span{margin-top:1.25rem;};label:StoryBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dW4tZXVuc2VvZy93b3Jrc3BhY2UvZ292aXMtcmVuZXdhbC9jb21wb25lbnQvYXRvbS9CYWRnZS9CYWRnZS5zdG9yaWVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QzhDIiwiZmlsZSI6Ii9Vc2Vycy95dW4tZXVuc2VvZy93b3Jrc3BhY2UvZ292aXMtcmVuZXdhbC9jb21wb25lbnQvYXRvbS9CYWRnZS9CYWRnZS5zdG9yaWVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2Rlc3RydWN0dXJpbmctYXNzaWdubWVudCAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNZXRhLCBTdG9yeSB9IGZyb20gJ0BzdG9yeWJvb2svcmVhY3QnO1xuaW1wb3J0IHsgRmlBcnJvd1JpZ2h0LCBGaVN0YXIgfSBmcm9tICdyZWFjdC1pY29ucy9maSc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgU3RvcnlMYXlvdXQgZnJvbSAnQENvbXBvbmVudEZhcm0vbW9kdWxlcy9zdG9yeV9sYXlvdXQvU3RvcnlMYXlvdXQnO1xuaW1wb3J0IHsgVGV4dEJhZGdlIH0gZnJvbSAnQENvbXBvbmVudEZhcm0vYXRvbS9CYWRnZS9UZXh0QmFkZ2UnO1xuaW1wb3J0IHsgQmFkZ2UsIEJhZGdlUHJvcHMgfSBmcm9tICcuL0JhZGdlJztcbmNvbnN0IG1ldGE6IE1ldGEgPSB7XG4gIHRpdGxlOiAnQXRvbXMvQmFkZ2UnLFxuICB0YWdzOiBbJ2F1dG9kb2NzJ10sXG4gIGFyZ3M6IHtcbiAgICBUb3RhbFByb3BzOiB7XG4gICAgICBwcm9wczogYHZhcmlhbnQo7ZWE7IiY6rCSKSwgc2l6ZSjquLDrs7jqsJIsbWQpYFxuICAgIH1cbiAgfSxcbiAgcGFyYW1ldGVyczoge1xuICAgIGRvY3M6IHtcbiAgICAgIHN0b3J5OiB7XG4gICAgICAgIGlubGluZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8vIHJlbmRlciB0aGUgc3RvcnkgaW4gYW4gaWZyYW1lXG4gICAgICBjYW52YXM6IHtcbiAgICAgICAgc291cmNlU3RhdGU6ICdzaG93bidcbiAgICAgIH0sXG4gICAgICAvLyBzdGFydCB3aXRoIHRoZSBzb3VyY2Ugb3BlblxuICAgICAgc291cmNlOiB7XG4gICAgICAgIHR5cGU6ICdjb2RlJ1xuICAgICAgfSAvLyBmb3JjZXMgdGhlIHJhdyBzb3VyY2UgY29kZSAocmF0aGVyIHRoYW4gdGhlIHJlbmRlcmVkIEpTWCkuXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZXRhO1xuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgQmFkZ2VQcm9wcyB7XG4gIGRhcmtNb2RlOiBib29sZWFuO1xufVxuY29uc3QgY29sb3IgPSBbJ2dyZWVuJywgJ3llbGxvdycsICdpbmRpZ28nLCAnYmx1ZScsICdyZWQnLCAnZ3JheSddO1xuY29uc3QgU3RvcnlCYWRnZTogU3Rvcnk8UHJvcHM+ID0gYXJncyA9PiB7XG4gIHJldHVybiA8U3RvcnlMYXlvdXQgey4uLmFyZ3N9IGN1c3RvbUNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgJiA+IHNwYW4gKyBzcGFuIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxLjI1cmVtOyAvKiBDb3JyZXNwb25kcyB0byBzcGFjZS15LTUgaW4gVGFpbHdpbmQgQ1NTICovXG4gICAgICAgIH1cbiAgICAgIGB9PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAgPEJhZGdlIGNvbG9yPVwib3JhbmdlXCIgc2l6ZT1cImNpcmNsZVwiPlxuICAgICAgICAgIE5cbiAgICAgICAgPC9CYWRnZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBkb3Qgc2l6ZT1cImxnXCI+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBkb3Q+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVwic21cIiBkb3Q+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgey8qIGRvdCDsl4bsnYTrlYwgKi99XG4gICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PlxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IHNpemU9XCJsZ1wiPlxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICA8L0JhZGdlPil9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH0+XG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVwic21cIj5cbiAgICAgICAgICAgIGxhYmVsXG4gICAgICAgICAgPC9CYWRnZT4pfVxuICAgICAgPC9kaXY+XG4gICAgICB7LyogZG90IOyXhuydhOuVjCAqL31cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH0+XG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZmlsbD1cIm91dGxpbmVcIj5cbiAgICAgICAgICAgIGxhYmVsXG4gICAgICAgICAgPC9CYWRnZT4pfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PlxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IGRvdCBmaWxsPVwib3V0bGluZVwiPlxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICA8L0JhZGdlPil9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH0+XG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZmlsbD1cInRyYW5zcGFyZW50XCIgZG90PlxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICA8L0JhZGdlPil9XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAgPEJhZGdlIExlYWRpbmdJY29uPXs8RmlTdGFyIC8+fT7sspjrpqwg7KSRPC9CYWRnZT5cbiAgICAgICAgPEJhZGdlIHsuLi5hcmdzfSBMZWFkaW5nSWNvbj17PGltZyBzcmM9XCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS90YWlsd2luZGNzcy9pbWFnZS91cGxvYWQvdjE2MzUyNzkyNzcvbmxfdHB5MmFiLnN2Z1wiIGFsdD1cIm5sXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgLz59PlxuICAgICAgICAgIExhYmVsXG4gICAgICAgIDwvQmFkZ2U+XG4gICAgICAgIDxCYWRnZSB7Li4uYXJnc30gVHJhaWxpbmdJY29uPXs8RmlBcnJvd1JpZ2h0IC8+fT5cbiAgICAgICAgICBMYWJlbFxuICAgICAgICA8L0JhZGdlPlxuICAgICAgICA8QmFkZ2Ugc2l6ZT1cImxnXCIgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XG4gICAgICAgICAgZXJyb3IsIHNtXG4gICAgICAgIDwvQmFkZ2U+XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIDxCYWRnZSB2YXJpYW50PVwibnVtYmVyaW5nXCIgc2l6ZT1cInhzXCI+XG4gICAgICAgIDFcbiAgICAgICA8L0JhZGdlPlxuICAgICAgIDxCYWRnZSB2YXJpYW50PVwiYmxhY2tcIiBzaXplPVwic21cIiB0ZXh0V2hpdGU+XG4gICAgICAgIOyymOumrCDspJFcbiAgICAgICA8L0JhZGdlPlxuICAgICAgIDxCYWRnZSB7Li4uYXJnc30+7LKY66asIOykkTwvQmFkZ2U+XG4gICAgICAgPEJhZGdlIHZhcmlhbnQ9XCJncmF5XCI+7LKY66asIOykkTwvQmFkZ2U+XG4gICAgICAgPEJhZGdlIHZhcmlhbnQ9XCJzdWNjZXNzXCIgc2l6ZT1cImxnXCIgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59PlxuICAgICAgICBURVhUXG4gICAgICAgPC9CYWRnZT5cbiAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IExlYWRpbmdJY29uPXs8RmlTdGFyIC8+fT5cbiAgICAgICAgTGFiZWxcbiAgICAgICA8L0JhZGdlPlxuICAgICAgIDxCYWRnZVxuICAgICAgICB7Li4uYXJnc31cbiAgICAgICAgTGVhZGluZ0ljb249e1xuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL3RhaWx3aW5kY3NzL2ltYWdlL3VwbG9hZC92MTYzNTI3OTI3Ny9ubF90cHkyYWIuc3ZnXCJcbiAgICAgICAgICAgIGFsdD1cIm5sXCJcbiAgICAgICAgICAgIHdpZHRoPVwiMTZcIlxuICAgICAgICAgICAgaGVpZ2h0PVwiMTZcIlxuICAgICAgICAgIC8+XG4gICAgICAgIH1cbiAgICAgICA+XG4gICAgICAgIExhYmVsXG4gICAgICAgPC9CYWRnZT5cbiAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XG4gICAgICAgIExhYmVsXG4gICAgICAgPC9CYWRnZT5cbiAgICAgICA8QmFkZ2VcbiAgICAgICAgdmFyaWFudD1cImVycm9yXCJcbiAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59XG4gICAgICAgIFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn1cbiAgICAgICA+XG4gICAgICAgIGVycm9yLCBzbVxuICAgICAgIDwvQmFkZ2U+ICovfVxuICAgIDwvU3RvcnlMYXlvdXQ+O1xufTtcbmV4cG9ydCBjb25zdCBEZWZhdWx0ID0gU3RvcnlCYWRnZS5iaW5kKHt9KTtcbkRlZmF1bHQuYXJncyA9IHtcbiAgc2l6ZTogJ21kJyxcbiAgZGFya01vZGU6IGZhbHNlXG59O1xuRGVmYXVsdC5wYXJhbWV0ZXJzID0ge1xuICBjb250cm9sczoge1xuICAgIGV4Y2x1ZGU6IFsnTGVhZGluZ0ljb24nLCAnVHJhaWxpbmdJY29uJywgJ2NsYXNzTmFtZSddXG4gIH1cbn07XG5jb25zdCBTdG9yeVRleHRCYWRnZTogU3Rvcnk8UHJvcHM+ID0gYXJncyA9PiB7XG4gIHJldHVybiA8U3RvcnlMYXlvdXQgey4uLmFyZ3N9IGN1c3RvbUNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgJiA+IHNwYW4gKyBzcGFuIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxLjI1cmVtOyAvKiBDb3JyZXNwb25kcyB0byBzcGFjZS15LTUgaW4gVGFpbHdpbmQgQ1NTICovXG4gICAgICAgIH1cbiAgICAgIGB9PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgICBgfT5cbiAgICAgICAgPFRleHRCYWRnZSB0ZXh0PVwi7Yag66eI7YagIOyGjOyKpCDrqbTsoIFcIiBjb2xvcj1cInJlZFwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxUZXh0QmFkZ2UgdGV4dD1cIjEwMOygkH43MOygkFwiIGNvbG9yPVwiYmx1ZVwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxUZXh0QmFkZ2UgdGV4dD1cIjcw7KCQfjUw7KCQXCIgY29sb3I9XCJ5ZWxsb3dcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgICAgIGB9PlxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XCI1MOygkH4w7KCQXCIgY29sb3I9XCJvcmFuZ2VcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9TdG9yeUxheW91dD47XG59O1xuZXhwb3J0IGNvbnN0IFRleHRCYWRnZUNhc2UgPSBTdG9yeVRleHRCYWRnZS5iaW5kKHt9KTtcbkRlZmF1bHQucGFyYW1ldGVycyA9IHtcbiAgLi4uRGVmYXVsdC5wYXJhbWV0ZXJzLFxuICBkb2NzOiB7XG4gICAgLi4uRGVmYXVsdC5wYXJhbWV0ZXJzPy5kb2NzLFxuICAgIHNvdXJjZToge1xuICAgICAgb3JpZ2luYWxTb3VyY2U6IFwiYXJncyA9PiB7XFxuICByZXR1cm4gPFN0b3J5TGF5b3V0IHsuLi5hcmdzfSBjdXN0b21Dc3M9e2Nzc2BcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICYgPiBzcGFuICsgc3BhbiB7XFxuICAgICAgICAgIG1hcmdpbi10b3A6IDEuMjVyZW07IC8qIENvcnJlc3BvbmRzIHRvIHNwYWNlLXktNSBpbiBUYWlsd2luZCBDU1MgKi9cXG4gICAgICAgIH1cXG4gICAgICBgfT5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAgPEJhZGdlIGNvbG9yPVxcXCJvcmFuZ2VcXFwiIHNpemU9XFxcImNpcmNsZVxcXCI+XFxuICAgICAgICAgIE5cXG4gICAgICAgIDwvQmFkZ2U+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjc3M9e2Nzc2BcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICB9XFxuICAgICAgICBgfT5cXG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZG90IHNpemU9XFxcImxnXFxcIj5cXG4gICAgICAgICAgICBsYWJlbFxcbiAgICAgICAgICA8L0JhZGdlPil9XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjc3M9e2Nzc2BcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICB9XFxuICAgICAgICBgfT5cXG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZG90PlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVxcXCJzbVxcXCIgZG90PlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICB7LyogZG90IFxcdUM1QzZcXHVDNzQ0XFx1QjU0QyAqL31cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVxcXCJsZ1xcXCI+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9PlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVxcXCJzbVxcXCI+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIHsvKiBkb3QgXFx1QzVDNlxcdUM3NDRcXHVCNTRDICovfVxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IGZpbGw9XFxcIm91dGxpbmVcXFwiPlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBkb3QgZmlsbD1cXFwib3V0bGluZVxcXCI+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IGZpbGw9XFxcInRyYW5zcGFyZW50XFxcIiBkb3Q+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICA8QmFkZ2UgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59PlxcdUNDOThcXHVCOUFDIFxcdUM5MTE8L0JhZGdlPlxcbiAgICAgICAgPEJhZGdlIHsuLi5hcmdzfSBMZWFkaW5nSWNvbj17PGltZyBzcmM9XFxcImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL3RhaWx3aW5kY3NzL2ltYWdlL3VwbG9hZC92MTYzNTI3OTI3Ny9ubF90cHkyYWIuc3ZnXFxcIiBhbHQ9XFxcIm5sXFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMTZcXFwiIC8+fT5cXG4gICAgICAgICAgTGFiZWxcXG4gICAgICAgIDwvQmFkZ2U+XFxuICAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XFxuICAgICAgICAgIExhYmVsXFxuICAgICAgICA8L0JhZGdlPlxcbiAgICAgICAgPEJhZGdlIHNpemU9XFxcImxnXFxcIiBMZWFkaW5nSWNvbj17PEZpU3RhciAvPn0gVHJhaWxpbmdJY29uPXs8RmlBcnJvd1JpZ2h0IC8+fT5cXG4gICAgICAgICAgZXJyb3IsIHNtXFxuICAgICAgICA8L0JhZGdlPlxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIHsvKiA8QmFkZ2UgdmFyaWFudD1cXFwibnVtYmVyaW5nXFxcIiBzaXplPVxcXCJ4c1xcXCI+XFxuICAgICAgICAxXFxuICAgICAgIDwvQmFkZ2U+XFxuICAgICAgIDxCYWRnZSB2YXJpYW50PVxcXCJibGFja1xcXCIgc2l6ZT1cXFwic21cXFwiIHRleHRXaGl0ZT5cXG4gICAgICAgIFxcdUNDOThcXHVCOUFDIFxcdUM5MTFcXG4gICAgICAgPC9CYWRnZT5cXG4gICAgICAgPEJhZGdlIHsuLi5hcmdzfT5cXHVDQzk4XFx1QjlBQyBcXHVDOTExPC9CYWRnZT5cXG4gICAgICAgPEJhZGdlIHZhcmlhbnQ9XFxcImdyYXlcXFwiPlxcdUNDOThcXHVCOUFDIFxcdUM5MTE8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2UgdmFyaWFudD1cXFwic3VjY2Vzc1xcXCIgc2l6ZT1cXFwibGdcXFwiIExlYWRpbmdJY29uPXs8RmlTdGFyIC8+fT5cXG4gICAgICAgIFRFWFRcXG4gICAgICAgPC9CYWRnZT5cXG4gICAgICAgPEJhZGdlIHsuLi5hcmdzfSBMZWFkaW5nSWNvbj17PEZpU3RhciAvPn0+XFxuICAgICAgICBMYWJlbFxcbiAgICAgICA8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2VcXG4gICAgICAgIHsuLi5hcmdzfVxcbiAgICAgICAgTGVhZGluZ0ljb249e1xcbiAgICAgICAgICA8aW1nXFxuICAgICAgICAgICAgc3JjPVxcXCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS90YWlsd2luZGNzcy9pbWFnZS91cGxvYWQvdjE2MzUyNzkyNzcvbmxfdHB5MmFiLnN2Z1xcXCJcXG4gICAgICAgICAgICBhbHQ9XFxcIm5sXFxcIlxcbiAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXG4gICAgICAgICAgICBoZWlnaHQ9XFxcIjE2XFxcIlxcbiAgICAgICAgICAvPlxcbiAgICAgICAgfVxcbiAgICAgICA+XFxuICAgICAgICBMYWJlbFxcbiAgICAgICA8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XFxuICAgICAgICBMYWJlbFxcbiAgICAgICA8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2VcXG4gICAgICAgIHZhcmlhbnQ9XFxcImVycm9yXFxcIlxcbiAgICAgICAgc2l6ZT1cXFwibGdcXFwiXFxuICAgICAgICBMZWFkaW5nSWNvbj17PEZpU3RhciAvPn1cXG4gICAgICAgIFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn1cXG4gICAgICAgPlxcbiAgICAgICAgZXJyb3IsIHNtXFxuICAgICAgIDwvQmFkZ2U+ICovfVxcbiAgICA8L1N0b3J5TGF5b3V0PjtcXG59XCIsXG4gICAgICAuLi5EZWZhdWx0LnBhcmFtZXRlcnM/LmRvY3M/LnNvdXJjZVxuICAgIH1cbiAgfVxufTtcblRleHRCYWRnZUNhc2UucGFyYW1ldGVycyA9IHtcbiAgLi4uVGV4dEJhZGdlQ2FzZS5wYXJhbWV0ZXJzLFxuICBkb2NzOiB7XG4gICAgLi4uVGV4dEJhZGdlQ2FzZS5wYXJhbWV0ZXJzPy5kb2NzLFxuICAgIHNvdXJjZToge1xuICAgICAgb3JpZ2luYWxTb3VyY2U6IFwiYXJncyA9PiB7XFxuICByZXR1cm4gPFN0b3J5TGF5b3V0IHsuLi5hcmdzfSBjdXN0b21Dc3M9e2Nzc2BcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICYgPiBzcGFuICsgc3BhbiB7XFxuICAgICAgICAgIG1hcmdpbi10b3A6IDEuMjVyZW07IC8qIENvcnJlc3BvbmRzIHRvIHNwYWNlLXktNSBpbiBUYWlsd2luZCBDU1MgKi9cXG4gICAgICAgIH1cXG4gICAgICBgfT5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgYH0+XFxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XFxcIlxcdUQxQTBcXHVCOUM4XFx1RDFBMCBcXHVDMThDXFx1QzJBNCBcXHVCQTc0XFx1QzgwMVxcXCIgY29sb3I9XFxcInJlZFxcXCIgLz5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgYH0+XFxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XFxcIjEwMFxcdUM4MTB+NzBcXHVDODEwXFxcIiBjb2xvcj1cXFwiYmx1ZVxcXCIgLz5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgYH0+XFxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XFxcIjcwXFx1QzgxMH41MFxcdUM4MTBcXFwiIGNvbG9yPVxcXCJ5ZWxsb3dcXFwiIC8+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjc3M9e2Nzc2BcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcXG4gICAgICAgIGB9PlxcbiAgICAgICAgPFRleHRCYWRnZSB0ZXh0PVxcXCI1MFxcdUM4MTB+MFxcdUM4MTBcXFwiIGNvbG9yPVxcXCJvcmFuZ2VcXFwiIC8+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvU3RvcnlMYXlvdXQ+O1xcbn1cIixcbiAgICAgIC4uLlRleHRCYWRnZUNhc2UucGFyYW1ldGVycz8uZG9jcz8uc291cmNlXG4gICAgfVxuICB9XG59OyJdfQ== */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar StoryBadge = function StoryBadge(args) {\n  return ___EmotionJSX(StoryLayout, _extends({}, args, {\n    customCss: _ref17\n  }), ___EmotionJSX("div", {\n    css: _ref16\n  }, ___EmotionJSX(Badge, {\n    color: "orange",\n    size: "circle"\n  }, "N")), ___EmotionJSX("div", {\n    css: _ref15\n  }, color.map(function (el) {\n    return ___EmotionJSX(Badge, {\n      key: el,\n      color: el,\n      dot: true,\n      size: "lg"\n    }, "label");\n  })), ___EmotionJSX("div", {\n    css: _ref14\n  }, color.map(function (el) {\n    return ___EmotionJSX(Badge, {\n      key: el,\n      color: el,\n      dot: true\n    }, "label");\n  })), ___EmotionJSX("div", {\n    css: _ref13\n  }, color.map(function (el) {\n    return ___EmotionJSX(Badge, {\n      key: el,\n      color: el,\n      size: "sm",\n      dot: true\n    }, "label");\n  })), ___EmotionJSX("div", {\n    css: _ref12\n  }, color.map(function (el) {\n    return ___EmotionJSX(Badge, {\n      key: el,\n      color: el,\n      size: "lg"\n    }, "label");\n  })), ___EmotionJSX("div", {\n    css: _ref11\n  }, color.map(function (el) {\n    return ___EmotionJSX(Badge, {\n      key: el,\n      color: el\n    }, "label");\n  })), ___EmotionJSX("div", {\n    css: _ref10\n  }, color.map(function (el) {\n    return ___EmotionJSX(Badge, {\n      key: el,\n      color: el,\n      size: "sm"\n    }, "label");\n  })), ___EmotionJSX("div", {\n    css: _ref9\n  }, color.map(function (el) {\n    return ___EmotionJSX(Badge, {\n      key: el,\n      color: el,\n      fill: "outline"\n    }, "label");\n  })), ___EmotionJSX("div", {\n    css: _ref8\n  }, color.map(function (el) {\n    return ___EmotionJSX(Badge, {\n      key: el,\n      color: el,\n      dot: true,\n      fill: "outline"\n    }, "label");\n  })), ___EmotionJSX("div", {\n    css: _ref7\n  }, color.map(function (el) {\n    return ___EmotionJSX(Badge, {\n      key: el,\n      color: el,\n      fill: "transparent",\n      dot: true\n    }, "label");\n  })), ___EmotionJSX("div", {\n    css: _ref6\n  }, ___EmotionJSX(Badge, {\n    LeadingIcon: ___EmotionJSX(FiStar, null)\n  }, "\\uCC98\\uB9AC \\uC911"), ___EmotionJSX(Badge, _extends({}, args, {\n    LeadingIcon: ___EmotionJSX("img", {\n      src: "https://res.cloudinary.com/tailwindcss/image/upload/v1635279277/nl_tpy2ab.svg",\n      alt: "nl",\n      width: "16",\n      height: "16"\n    })\n  }), "Label"), ___EmotionJSX(Badge, _extends({}, args, {\n    TrailingIcon: ___EmotionJSX(FiArrowRight, null)\n  }), "Label"), ___EmotionJSX(Badge, {\n    size: "lg",\n    LeadingIcon: ___EmotionJSX(FiStar, null),\n    TrailingIcon: ___EmotionJSX(FiArrowRight, null)\n  }, "error, sm")));\n};\nexport var Default = StoryBadge.bind({});\nDefault.args = {\n  size: \'md\',\n  darkMode: false\n};\nDefault.parameters = {\n  controls: {\n    exclude: [\'LeadingIcon\', \'TrailingIcon\', \'className\']\n  }\n};\nvar _ref = process.env.NODE_ENV === "production" ? {\n  name: "g46w8s",\n  styles: "margin-bottom:30px"\n} : {\n  name: "cbfwsw-StoryTextBadge",\n  styles: "margin-bottom:30px;label:StoryTextBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref2 = process.env.NODE_ENV === "production" ? {\n  name: "g46w8s",\n  styles: "margin-bottom:30px"\n} : {\n  name: "cbfwsw-StoryTextBadge",\n  styles: "margin-bottom:30px;label:StoryTextBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref3 = process.env.NODE_ENV === "production" ? {\n  name: "g46w8s",\n  styles: "margin-bottom:30px"\n} : {\n  name: "cbfwsw-StoryTextBadge",\n  styles: "margin-bottom:30px;label:StoryTextBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dW4tZXVuc2VvZy93b3Jrc3BhY2UvZ292aXMtcmVuZXdhbC9jb21wb25lbnQvYXRvbS9CYWRnZS9CYWRnZS5zdG9yaWVzLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrUG1CIiwiZmlsZSI6Ii9Vc2Vycy95dW4tZXVuc2VvZy93b3Jrc3BhY2UvZ292aXMtcmVuZXdhbC9jb21wb25lbnQvYXRvbS9CYWRnZS9CYWRnZS5zdG9yaWVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2Rlc3RydWN0dXJpbmctYXNzaWdubWVudCAqL1xuLy8gQHRzLW5vY2hlY2tcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNZXRhLCBTdG9yeSB9IGZyb20gJ0BzdG9yeWJvb2svcmVhY3QnO1xuaW1wb3J0IHsgRmlBcnJvd1JpZ2h0LCBGaVN0YXIgfSBmcm9tICdyZWFjdC1pY29ucy9maSc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgU3RvcnlMYXlvdXQgZnJvbSAnQENvbXBvbmVudEZhcm0vbW9kdWxlcy9zdG9yeV9sYXlvdXQvU3RvcnlMYXlvdXQnO1xuaW1wb3J0IHsgVGV4dEJhZGdlIH0gZnJvbSAnQENvbXBvbmVudEZhcm0vYXRvbS9CYWRnZS9UZXh0QmFkZ2UnO1xuaW1wb3J0IHsgQmFkZ2UsIEJhZGdlUHJvcHMgfSBmcm9tICcuL0JhZGdlJztcbmNvbnN0IG1ldGE6IE1ldGEgPSB7XG4gIHRpdGxlOiAnQXRvbXMvQmFkZ2UnLFxuICB0YWdzOiBbJ2F1dG9kb2NzJ10sXG4gIGFyZ3M6IHtcbiAgICBUb3RhbFByb3BzOiB7XG4gICAgICBwcm9wczogYHZhcmlhbnQo7ZWE7IiY6rCSKSwgc2l6ZSjquLDrs7jqsJIsbWQpYFxuICAgIH1cbiAgfSxcbiAgcGFyYW1ldGVyczoge1xuICAgIGRvY3M6IHtcbiAgICAgIHN0b3J5OiB7XG4gICAgICAgIGlubGluZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8vIHJlbmRlciB0aGUgc3RvcnkgaW4gYW4gaWZyYW1lXG4gICAgICBjYW52YXM6IHtcbiAgICAgICAgc291cmNlU3RhdGU6ICdzaG93bidcbiAgICAgIH0sXG4gICAgICAvLyBzdGFydCB3aXRoIHRoZSBzb3VyY2Ugb3BlblxuICAgICAgc291cmNlOiB7XG4gICAgICAgIHR5cGU6ICdjb2RlJ1xuICAgICAgfSAvLyBmb3JjZXMgdGhlIHJhdyBzb3VyY2UgY29kZSAocmF0aGVyIHRoYW4gdGhlIHJlbmRlcmVkIEpTWCkuXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZXRhO1xuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgQmFkZ2VQcm9wcyB7XG4gIGRhcmtNb2RlOiBib29sZWFuO1xufVxuY29uc3QgY29sb3IgPSBbJ2dyZWVuJywgJ3llbGxvdycsICdpbmRpZ28nLCAnYmx1ZScsICdyZWQnLCAnZ3JheSddO1xuY29uc3QgU3RvcnlCYWRnZTogU3Rvcnk8UHJvcHM+ID0gYXJncyA9PiB7XG4gIHJldHVybiA8U3RvcnlMYXlvdXQgey4uLmFyZ3N9IGN1c3RvbUNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgJiA+IHNwYW4gKyBzcGFuIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxLjI1cmVtOyAvKiBDb3JyZXNwb25kcyB0byBzcGFjZS15LTUgaW4gVGFpbHdpbmQgQ1NTICovXG4gICAgICAgIH1cbiAgICAgIGB9PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAgPEJhZGdlIGNvbG9yPVwib3JhbmdlXCIgc2l6ZT1cImNpcmNsZVwiPlxuICAgICAgICAgIE5cbiAgICAgICAgPC9CYWRnZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBkb3Qgc2l6ZT1cImxnXCI+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBkb3Q+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVwic21cIiBkb3Q+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgey8qIGRvdCDsl4bsnYTrlYwgKi99XG4gICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PlxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IHNpemU9XCJsZ1wiPlxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICA8L0JhZGdlPil9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH0+XG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0+XG4gICAgICAgICAgICBsYWJlbFxuICAgICAgICAgIDwvQmFkZ2U+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVwic21cIj5cbiAgICAgICAgICAgIGxhYmVsXG4gICAgICAgICAgPC9CYWRnZT4pfVxuICAgICAgPC9kaXY+XG4gICAgICB7LyogZG90IOyXhuydhOuVjCAqL31cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH0+XG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZmlsbD1cIm91dGxpbmVcIj5cbiAgICAgICAgICAgIGxhYmVsXG4gICAgICAgICAgPC9CYWRnZT4pfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB9XG4gICAgICAgIGB9PlxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IGRvdCBmaWxsPVwib3V0bGluZVwiPlxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICA8L0JhZGdlPil9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgIHNwYW4ge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH0+XG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZmlsbD1cInRyYW5zcGFyZW50XCIgZG90PlxuICAgICAgICAgICAgbGFiZWxcbiAgICAgICAgICA8L0JhZGdlPil9XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgICAgc3BhbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfT5cbiAgICAgICAgPEJhZGdlIExlYWRpbmdJY29uPXs8RmlTdGFyIC8+fT7sspjrpqwg7KSRPC9CYWRnZT5cbiAgICAgICAgPEJhZGdlIHsuLi5hcmdzfSBMZWFkaW5nSWNvbj17PGltZyBzcmM9XCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS90YWlsd2luZGNzcy9pbWFnZS91cGxvYWQvdjE2MzUyNzkyNzcvbmxfdHB5MmFiLnN2Z1wiIGFsdD1cIm5sXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgLz59PlxuICAgICAgICAgIExhYmVsXG4gICAgICAgIDwvQmFkZ2U+XG4gICAgICAgIDxCYWRnZSB7Li4uYXJnc30gVHJhaWxpbmdJY29uPXs8RmlBcnJvd1JpZ2h0IC8+fT5cbiAgICAgICAgICBMYWJlbFxuICAgICAgICA8L0JhZGdlPlxuICAgICAgICA8QmFkZ2Ugc2l6ZT1cImxnXCIgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XG4gICAgICAgICAgZXJyb3IsIHNtXG4gICAgICAgIDwvQmFkZ2U+XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIDxCYWRnZSB2YXJpYW50PVwibnVtYmVyaW5nXCIgc2l6ZT1cInhzXCI+XG4gICAgICAgIDFcbiAgICAgICA8L0JhZGdlPlxuICAgICAgIDxCYWRnZSB2YXJpYW50PVwiYmxhY2tcIiBzaXplPVwic21cIiB0ZXh0V2hpdGU+XG4gICAgICAgIOyymOumrCDspJFcbiAgICAgICA8L0JhZGdlPlxuICAgICAgIDxCYWRnZSB7Li4uYXJnc30+7LKY66asIOykkTwvQmFkZ2U+XG4gICAgICAgPEJhZGdlIHZhcmlhbnQ9XCJncmF5XCI+7LKY66asIOykkTwvQmFkZ2U+XG4gICAgICAgPEJhZGdlIHZhcmlhbnQ9XCJzdWNjZXNzXCIgc2l6ZT1cImxnXCIgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59PlxuICAgICAgICBURVhUXG4gICAgICAgPC9CYWRnZT5cbiAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IExlYWRpbmdJY29uPXs8RmlTdGFyIC8+fT5cbiAgICAgICAgTGFiZWxcbiAgICAgICA8L0JhZGdlPlxuICAgICAgIDxCYWRnZVxuICAgICAgICB7Li4uYXJnc31cbiAgICAgICAgTGVhZGluZ0ljb249e1xuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz1cImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL3RhaWx3aW5kY3NzL2ltYWdlL3VwbG9hZC92MTYzNTI3OTI3Ny9ubF90cHkyYWIuc3ZnXCJcbiAgICAgICAgICAgIGFsdD1cIm5sXCJcbiAgICAgICAgICAgIHdpZHRoPVwiMTZcIlxuICAgICAgICAgICAgaGVpZ2h0PVwiMTZcIlxuICAgICAgICAgIC8+XG4gICAgICAgIH1cbiAgICAgICA+XG4gICAgICAgIExhYmVsXG4gICAgICAgPC9CYWRnZT5cbiAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XG4gICAgICAgIExhYmVsXG4gICAgICAgPC9CYWRnZT5cbiAgICAgICA8QmFkZ2VcbiAgICAgICAgdmFyaWFudD1cImVycm9yXCJcbiAgICAgICAgc2l6ZT1cImxnXCJcbiAgICAgICAgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59XG4gICAgICAgIFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn1cbiAgICAgICA+XG4gICAgICAgIGVycm9yLCBzbVxuICAgICAgIDwvQmFkZ2U+ICovfVxuICAgIDwvU3RvcnlMYXlvdXQ+O1xufTtcbmV4cG9ydCBjb25zdCBEZWZhdWx0ID0gU3RvcnlCYWRnZS5iaW5kKHt9KTtcbkRlZmF1bHQuYXJncyA9IHtcbiAgc2l6ZTogJ21kJyxcbiAgZGFya01vZGU6IGZhbHNlXG59O1xuRGVmYXVsdC5wYXJhbWV0ZXJzID0ge1xuICBjb250cm9sczoge1xuICAgIGV4Y2x1ZGU6IFsnTGVhZGluZ0ljb24nLCAnVHJhaWxpbmdJY29uJywgJ2NsYXNzTmFtZSddXG4gIH1cbn07XG5jb25zdCBTdG9yeVRleHRCYWRnZTogU3Rvcnk8UHJvcHM+ID0gYXJncyA9PiB7XG4gIHJldHVybiA8U3RvcnlMYXlvdXQgey4uLmFyZ3N9IGN1c3RvbUNzcz17Y3NzYFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgJiA+IHNwYW4gKyBzcGFuIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxLjI1cmVtOyAvKiBDb3JyZXNwb25kcyB0byBzcGFjZS15LTUgaW4gVGFpbHdpbmQgQ1NTICovXG4gICAgICAgIH1cbiAgICAgIGB9PlxuICAgICAgPGRpdiBjc3M9e2Nzc2BcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgICBgfT5cbiAgICAgICAgPFRleHRCYWRnZSB0ZXh0PVwi7Yag66eI7YagIOyGjOyKpCDrqbTsoIFcIiBjb2xvcj1cInJlZFwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxUZXh0QmFkZ2UgdGV4dD1cIjEwMOygkH43MOygkFwiIGNvbG9yPVwiYmx1ZVwiIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtjc3NgXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgICAgYH0+XG4gICAgICAgIDxUZXh0QmFkZ2UgdGV4dD1cIjcw7KCQfjUw7KCQXCIgY29sb3I9XCJ5ZWxsb3dcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17Y3NzYFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgICAgIGB9PlxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XCI1MOygkH4w7KCQXCIgY29sb3I9XCJvcmFuZ2VcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9TdG9yeUxheW91dD47XG59O1xuZXhwb3J0IGNvbnN0IFRleHRCYWRnZUNhc2UgPSBTdG9yeVRleHRCYWRnZS5iaW5kKHt9KTtcbkRlZmF1bHQucGFyYW1ldGVycyA9IHtcbiAgLi4uRGVmYXVsdC5wYXJhbWV0ZXJzLFxuICBkb2NzOiB7XG4gICAgLi4uRGVmYXVsdC5wYXJhbWV0ZXJzPy5kb2NzLFxuICAgIHNvdXJjZToge1xuICAgICAgb3JpZ2luYWxTb3VyY2U6IFwiYXJncyA9PiB7XFxuICByZXR1cm4gPFN0b3J5TGF5b3V0IHsuLi5hcmdzfSBjdXN0b21Dc3M9e2Nzc2BcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICYgPiBzcGFuICsgc3BhbiB7XFxuICAgICAgICAgIG1hcmdpbi10b3A6IDEuMjVyZW07IC8qIENvcnJlc3BvbmRzIHRvIHNwYWNlLXktNSBpbiBUYWlsd2luZCBDU1MgKi9cXG4gICAgICAgIH1cXG4gICAgICBgfT5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAgPEJhZGdlIGNvbG9yPVxcXCJvcmFuZ2VcXFwiIHNpemU9XFxcImNpcmNsZVxcXCI+XFxuICAgICAgICAgIE5cXG4gICAgICAgIDwvQmFkZ2U+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjc3M9e2Nzc2BcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICB9XFxuICAgICAgICBgfT5cXG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZG90IHNpemU9XFxcImxnXFxcIj5cXG4gICAgICAgICAgICBsYWJlbFxcbiAgICAgICAgICA8L0JhZGdlPil9XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjc3M9e2Nzc2BcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgICAgICAgc3BhbiB7XFxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgICB9XFxuICAgICAgICBgfT5cXG4gICAgICAgIHtjb2xvci5tYXAoZWwgPT4gPEJhZGdlIGtleT17ZWx9IGNvbG9yPXtlbH0gZG90PlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVxcXCJzbVxcXCIgZG90PlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICB7LyogZG90IFxcdUM1QzZcXHVDNzQ0XFx1QjU0QyAqL31cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVxcXCJsZ1xcXCI+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9PlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBzaXplPVxcXCJzbVxcXCI+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIHsvKiBkb3QgXFx1QzVDNlxcdUM3NDRcXHVCNTRDICovfVxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IGZpbGw9XFxcIm91dGxpbmVcXFwiPlxcbiAgICAgICAgICAgIGxhYmVsXFxuICAgICAgICAgIDwvQmFkZ2U+KX1cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICAgICAgICBzcGFuIHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIGB9PlxcbiAgICAgICAge2NvbG9yLm1hcChlbCA9PiA8QmFkZ2Uga2V5PXtlbH0gY29sb3I9e2VsfSBkb3QgZmlsbD1cXFwib3V0bGluZVxcXCI+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICB7Y29sb3IubWFwKGVsID0+IDxCYWRnZSBrZXk9e2VsfSBjb2xvcj17ZWx9IGZpbGw9XFxcInRyYW5zcGFyZW50XFxcIiBkb3Q+XFxuICAgICAgICAgICAgbGFiZWxcXG4gICAgICAgICAgPC9CYWRnZT4pfVxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIDxkaXYgY3NzPXtjc3NgXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgIHNwYW4ge1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgYH0+XFxuICAgICAgICA8QmFkZ2UgTGVhZGluZ0ljb249ezxGaVN0YXIgLz59PlxcdUNDOThcXHVCOUFDIFxcdUM5MTE8L0JhZGdlPlxcbiAgICAgICAgPEJhZGdlIHsuLi5hcmdzfSBMZWFkaW5nSWNvbj17PGltZyBzcmM9XFxcImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL3RhaWx3aW5kY3NzL2ltYWdlL3VwbG9hZC92MTYzNTI3OTI3Ny9ubF90cHkyYWIuc3ZnXFxcIiBhbHQ9XFxcIm5sXFxcIiB3aWR0aD1cXFwiMTZcXFwiIGhlaWdodD1cXFwiMTZcXFwiIC8+fT5cXG4gICAgICAgICAgTGFiZWxcXG4gICAgICAgIDwvQmFkZ2U+XFxuICAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XFxuICAgICAgICAgIExhYmVsXFxuICAgICAgICA8L0JhZGdlPlxcbiAgICAgICAgPEJhZGdlIHNpemU9XFxcImxnXFxcIiBMZWFkaW5nSWNvbj17PEZpU3RhciAvPn0gVHJhaWxpbmdJY29uPXs8RmlBcnJvd1JpZ2h0IC8+fT5cXG4gICAgICAgICAgZXJyb3IsIHNtXFxuICAgICAgICA8L0JhZGdlPlxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIHsvKiA8QmFkZ2UgdmFyaWFudD1cXFwibnVtYmVyaW5nXFxcIiBzaXplPVxcXCJ4c1xcXCI+XFxuICAgICAgICAxXFxuICAgICAgIDwvQmFkZ2U+XFxuICAgICAgIDxCYWRnZSB2YXJpYW50PVxcXCJibGFja1xcXCIgc2l6ZT1cXFwic21cXFwiIHRleHRXaGl0ZT5cXG4gICAgICAgIFxcdUNDOThcXHVCOUFDIFxcdUM5MTFcXG4gICAgICAgPC9CYWRnZT5cXG4gICAgICAgPEJhZGdlIHsuLi5hcmdzfT5cXHVDQzk4XFx1QjlBQyBcXHVDOTExPC9CYWRnZT5cXG4gICAgICAgPEJhZGdlIHZhcmlhbnQ9XFxcImdyYXlcXFwiPlxcdUNDOThcXHVCOUFDIFxcdUM5MTE8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2UgdmFyaWFudD1cXFwic3VjY2Vzc1xcXCIgc2l6ZT1cXFwibGdcXFwiIExlYWRpbmdJY29uPXs8RmlTdGFyIC8+fT5cXG4gICAgICAgIFRFWFRcXG4gICAgICAgPC9CYWRnZT5cXG4gICAgICAgPEJhZGdlIHsuLi5hcmdzfSBMZWFkaW5nSWNvbj17PEZpU3RhciAvPn0+XFxuICAgICAgICBMYWJlbFxcbiAgICAgICA8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2VcXG4gICAgICAgIHsuLi5hcmdzfVxcbiAgICAgICAgTGVhZGluZ0ljb249e1xcbiAgICAgICAgICA8aW1nXFxuICAgICAgICAgICAgc3JjPVxcXCJodHRwczovL3Jlcy5jbG91ZGluYXJ5LmNvbS90YWlsd2luZGNzcy9pbWFnZS91cGxvYWQvdjE2MzUyNzkyNzcvbmxfdHB5MmFiLnN2Z1xcXCJcXG4gICAgICAgICAgICBhbHQ9XFxcIm5sXFxcIlxcbiAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXG4gICAgICAgICAgICBoZWlnaHQ9XFxcIjE2XFxcIlxcbiAgICAgICAgICAvPlxcbiAgICAgICAgfVxcbiAgICAgICA+XFxuICAgICAgICBMYWJlbFxcbiAgICAgICA8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2Ugey4uLmFyZ3N9IFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn0+XFxuICAgICAgICBMYWJlbFxcbiAgICAgICA8L0JhZGdlPlxcbiAgICAgICA8QmFkZ2VcXG4gICAgICAgIHZhcmlhbnQ9XFxcImVycm9yXFxcIlxcbiAgICAgICAgc2l6ZT1cXFwibGdcXFwiXFxuICAgICAgICBMZWFkaW5nSWNvbj17PEZpU3RhciAvPn1cXG4gICAgICAgIFRyYWlsaW5nSWNvbj17PEZpQXJyb3dSaWdodCAvPn1cXG4gICAgICAgPlxcbiAgICAgICAgZXJyb3IsIHNtXFxuICAgICAgIDwvQmFkZ2U+ICovfVxcbiAgICA8L1N0b3J5TGF5b3V0PjtcXG59XCIsXG4gICAgICAuLi5EZWZhdWx0LnBhcmFtZXRlcnM/LmRvY3M/LnNvdXJjZVxuICAgIH1cbiAgfVxufTtcblRleHRCYWRnZUNhc2UucGFyYW1ldGVycyA9IHtcbiAgLi4uVGV4dEJhZGdlQ2FzZS5wYXJhbWV0ZXJzLFxuICBkb2NzOiB7XG4gICAgLi4uVGV4dEJhZGdlQ2FzZS5wYXJhbWV0ZXJzPy5kb2NzLFxuICAgIHNvdXJjZToge1xuICAgICAgb3JpZ2luYWxTb3VyY2U6IFwiYXJncyA9PiB7XFxuICByZXR1cm4gPFN0b3J5TGF5b3V0IHsuLi5hcmdzfSBjdXN0b21Dc3M9e2Nzc2BcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgICYgPiBzcGFuICsgc3BhbiB7XFxuICAgICAgICAgIG1hcmdpbi10b3A6IDEuMjVyZW07IC8qIENvcnJlc3BvbmRzIHRvIHNwYWNlLXktNSBpbiBUYWlsd2luZCBDU1MgKi9cXG4gICAgICAgIH1cXG4gICAgICBgfT5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgYH0+XFxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XFxcIlxcdUQxQTBcXHVCOUM4XFx1RDFBMCBcXHVDMThDXFx1QzJBNCBcXHVCQTc0XFx1QzgwMVxcXCIgY29sb3I9XFxcInJlZFxcXCIgLz5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgYH0+XFxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XFxcIjEwMFxcdUM4MTB+NzBcXHVDODEwXFxcIiBjb2xvcj1cXFwiYmx1ZVxcXCIgLz5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8ZGl2IGNzcz17Y3NzYFxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbiAgICAgICAgYH0+XFxuICAgICAgICA8VGV4dEJhZGdlIHRleHQ9XFxcIjcwXFx1QzgxMH41MFxcdUM4MTBcXFwiIGNvbG9yPVxcXCJ5ZWxsb3dcXFwiIC8+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjc3M9e2Nzc2BcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcXG4gICAgICAgIGB9PlxcbiAgICAgICAgPFRleHRCYWRnZSB0ZXh0PVxcXCI1MFxcdUM4MTB+MFxcdUM4MTBcXFwiIGNvbG9yPVxcXCJvcmFuZ2VcXFwiIC8+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvU3RvcnlMYXlvdXQ+O1xcbn1cIixcbiAgICAgIC4uLlRleHRCYWRnZUNhc2UucGFyYW1ldGVycz8uZG9jcz8uc291cmNlXG4gICAgfVxuICB9XG59OyJdfQ== */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref4 = process.env.NODE_ENV === "production" ? {\n  name: "g46w8s",\n  styles: "margin-bottom:30px"\n} : {\n  name: "cbfwsw-StoryTextBadge",\n  styles: "margin-bottom:30px;label:StoryTextBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar _ref5 = process.env.NODE_ENV === "production" ? {\n  name: "15uhzwb",\n  styles: "display:inline-flex;flex-direction:column;&>span+span{margin-top:1.25rem;}"\n} : {\n  name: "eegf6c-StoryTextBadge",\n  styles: "display:inline-flex;flex-direction:column;&>span+span{margin-top:1.25rem;};label:StoryTextBadge;",\n  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\nvar StoryTextBadge = function StoryTextBadge(args) {\n  return ___EmotionJSX(StoryLayout, _extends({}, args, {\n    customCss: _ref5\n  }), ___EmotionJSX("div", {\n    css: _ref4\n  }, ___EmotionJSX(TextBadge, {\n    text: "\\uD1A0\\uB9C8\\uD1A0 \\uC18C\\uC2A4 \\uBA74\\uC801",\n    color: "red"\n  })), ___EmotionJSX("div", {\n    css: _ref3\n  }, ___EmotionJSX(TextBadge, {\n    text: "100\\uC810~70\\uC810",\n    color: "blue"\n  })), ___EmotionJSX("div", {\n    css: _ref2\n  }, ___EmotionJSX(TextBadge, {\n    text: "70\\uC810~50\\uC810",\n    color: "yellow"\n  })), ___EmotionJSX("div", {\n    css: _ref\n  }, ___EmotionJSX(TextBadge, {\n    text: "50\\uC810~0\\uC810",\n    color: "orange"\n  })));\n};\nexport var TextBadgeCase = StoryTextBadge.bind({});\nDefault.parameters = _objectSpread(_objectSpread({}, Default.parameters), {}, {\n  docs: _objectSpread(_objectSpread({}, (_Default$parameters = Default.parameters) === null || _Default$parameters === void 0 ? void 0 : _Default$parameters.docs), {}, {\n    source: _objectSpread({\n      originalSource: "args => {\\n  return <StoryLayout {...args} customCss={css`\\n        display: inline-flex;\\n        flex-direction: column;\\n        & > span + span {\\n          margin-top: 1.25rem; /* Corresponds to space-y-5 in Tailwind CSS */\\n        }\\n      `}>\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        <Badge color=\\"orange\\" size=\\"circle\\">\\n          N\\n        </Badge>\\n      </div>\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        {color.map(el => <Badge key={el} color={el} dot size=\\"lg\\">\\n            label\\n          </Badge>)}\\n      </div>\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        {color.map(el => <Badge key={el} color={el} dot>\\n            label\\n          </Badge>)}\\n      </div>\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        {color.map(el => <Badge key={el} color={el} size=\\"sm\\" dot>\\n            label\\n          </Badge>)}\\n      </div>\\n      {/* dot \\uC5C6\\uC744\\uB54C */}\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        {color.map(el => <Badge key={el} color={el} size=\\"lg\\">\\n            label\\n          </Badge>)}\\n      </div>\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        {color.map(el => <Badge key={el} color={el}>\\n            label\\n          </Badge>)}\\n      </div>\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        {color.map(el => <Badge key={el} color={el} size=\\"sm\\">\\n            label\\n          </Badge>)}\\n      </div>\\n      {/* dot \\uC5C6\\uC744\\uB54C */}\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        {color.map(el => <Badge key={el} color={el} fill=\\"outline\\">\\n            label\\n          </Badge>)}\\n      </div>\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        {color.map(el => <Badge key={el} color={el} dot fill=\\"outline\\">\\n            label\\n          </Badge>)}\\n      </div>\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        {color.map(el => <Badge key={el} color={el} fill=\\"transparent\\" dot>\\n            label\\n          </Badge>)}\\n      </div>\\n\\n      <div css={css`\\n          display: flex;\\n          margin-bottom: 10px;\\n          span {\\n            margin-right: 10px;\\n          }\\n        `}>\\n        <Badge LeadingIcon={<FiStar />}>\\uCC98\\uB9AC \\uC911</Badge>\\n        <Badge {...args} LeadingIcon={<img src=\\"https://res.cloudinary.com/tailwindcss/image/upload/v1635279277/nl_tpy2ab.svg\\" alt=\\"nl\\" width=\\"16\\" height=\\"16\\" />}>\\n          Label\\n        </Badge>\\n        <Badge {...args} TrailingIcon={<FiArrowRight />}>\\n          Label\\n        </Badge>\\n        <Badge size=\\"lg\\" LeadingIcon={<FiStar />} TrailingIcon={<FiArrowRight />}>\\n          error, sm\\n        </Badge>\\n      </div>\\n\\n      {/* <Badge variant=\\"numbering\\" size=\\"xs\\">\\n        1\\n       </Badge>\\n       <Badge variant=\\"black\\" size=\\"sm\\" textWhite>\\n        \\uCC98\\uB9AC \\uC911\\n       </Badge>\\n       <Badge {...args}>\\uCC98\\uB9AC \\uC911</Badge>\\n       <Badge variant=\\"gray\\">\\uCC98\\uB9AC \\uC911</Badge>\\n       <Badge variant=\\"success\\" size=\\"lg\\" LeadingIcon={<FiStar />}>\\n        TEXT\\n       </Badge>\\n       <Badge {...args} LeadingIcon={<FiStar />}>\\n        Label\\n       </Badge>\\n       <Badge\\n        {...args}\\n        LeadingIcon={\\n          <img\\n            src=\\"https://res.cloudinary.com/tailwindcss/image/upload/v1635279277/nl_tpy2ab.svg\\"\\n            alt=\\"nl\\"\\n            width=\\"16\\"\\n            height=\\"16\\"\\n          />\\n        }\\n       >\\n        Label\\n       </Badge>\\n       <Badge {...args} TrailingIcon={<FiArrowRight />}>\\n        Label\\n       </Badge>\\n       <Badge\\n        variant=\\"error\\"\\n        size=\\"lg\\"\\n        LeadingIcon={<FiStar />}\\n        TrailingIcon={<FiArrowRight />}\\n       >\\n        error, sm\\n       </Badge> */}\\n    </StoryLayout>;\\n}"\n    }, (_Default$parameters2 = Default.parameters) === null || _Default$parameters2 === void 0 ? void 0 : (_Default$parameters2$ = _Default$parameters2.docs) === null || _Default$parameters2$ === void 0 ? void 0 : _Default$parameters2$.source)\n  })\n});\nTextBadgeCase.parameters = _objectSpread(_objectSpread({}, TextBadgeCase.parameters), {}, {\n  docs: _objectSpread(_objectSpread({}, (_TextBadgeCase$parame = TextBadgeCase.parameters) === null || _TextBadgeCase$parame === void 0 ? void 0 : _TextBadgeCase$parame.docs), {}, {\n    source: _objectSpread({\n      originalSource: "args => {\\n  return <StoryLayout {...args} customCss={css`\\n        display: inline-flex;\\n        flex-direction: column;\\n        & > span + span {\\n          margin-top: 1.25rem; /* Corresponds to space-y-5 in Tailwind CSS */\\n        }\\n      `}>\\n      <div css={css`\\n          margin-bottom: 30px;\\n        `}>\\n        <TextBadge text=\\"\\uD1A0\\uB9C8\\uD1A0 \\uC18C\\uC2A4 \\uBA74\\uC801\\" color=\\"red\\" />\\n      </div>\\n      <div css={css`\\n          margin-bottom: 30px;\\n        `}>\\n        <TextBadge text=\\"100\\uC810~70\\uC810\\" color=\\"blue\\" />\\n      </div>\\n      <div css={css`\\n          margin-bottom: 30px;\\n        `}>\\n        <TextBadge text=\\"70\\uC810~50\\uC810\\" color=\\"yellow\\" />\\n      </div>\\n      <div css={css`\\n          margin-bottom: 30px;\\n        `}>\\n        <TextBadge text=\\"50\\uC810~0\\uC810\\" color=\\"orange\\" />\\n      </div>\\n    </StoryLayout>;\\n}"\n    }, (_TextBadgeCase$parame2 = TextBadgeCase.parameters) === null || _TextBadgeCase$parame2 === void 0 ? void 0 : (_TextBadgeCase$parame3 = _TextBadgeCase$parame2.docs) === null || _TextBadgeCase$parame3 === void 0 ? void 0 : _TextBadgeCase$parame3.source)\n  })\n});',locationsMap:{default:{startLoc:{col:17,line:149},endLoc:{col:1,line:250},startBody:{col:17,line:149},endBody:{col:1,line:250}},"text-badge-case":{startLoc:{col:21,line:306},endLoc:{col:1,line:330},startBody:{col:21,line:306},endBody:{col:1,line:330}}}},docs:{story:{inline:!0},canvas:{sourceState:"shown"},source:{type:"code"}}}};var color=["green","yellow","indigo","blue","red","gray"],_ref6={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref7={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref8={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref9={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref10={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref11={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref12={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref13={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref14={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref15={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref16={name:"1a7i5qx",styles:"display:flex;margin-bottom:10px;span{margin-right:10px;}"},_ref17={name:"15uhzwb",styles:"display:inline-flex;flex-direction:column;&>span+span{margin-top:1.25rem;}"},Default=function StoryBadge(args){return(0,emotion_react_browser_esm.tZ)(StoryLayout.Z,(0,esm_extends.Z)({},args,{customCss:_ref17}),(0,emotion_react_browser_esm.tZ)("div",{css:_ref16},(0,emotion_react_browser_esm.tZ)(Badge.C,{color:"orange",size:"circle"},"N")),(0,emotion_react_browser_esm.tZ)("div",{css:_ref15},color.map((function(el){return(0,emotion_react_browser_esm.tZ)(Badge.C,{key:el,color:el,dot:!0,size:"lg"},"label")}))),(0,emotion_react_browser_esm.tZ)("div",{css:_ref14},color.map((function(el){return(0,emotion_react_browser_esm.tZ)(Badge.C,{key:el,color:el,dot:!0},"label")}))),(0,emotion_react_browser_esm.tZ)("div",{css:_ref13},color.map((function(el){return(0,emotion_react_browser_esm.tZ)(Badge.C,{key:el,color:el,size:"sm",dot:!0},"label")}))),(0,emotion_react_browser_esm.tZ)("div",{css:_ref12},color.map((function(el){return(0,emotion_react_browser_esm.tZ)(Badge.C,{key:el,color:el,size:"lg"},"label")}))),(0,emotion_react_browser_esm.tZ)("div",{css:_ref11},color.map((function(el){return(0,emotion_react_browser_esm.tZ)(Badge.C,{key:el,color:el},"label")}))),(0,emotion_react_browser_esm.tZ)("div",{css:_ref10},color.map((function(el){return(0,emotion_react_browser_esm.tZ)(Badge.C,{key:el,color:el,size:"sm"},"label")}))),(0,emotion_react_browser_esm.tZ)("div",{css:_ref9},color.map((function(el){return(0,emotion_react_browser_esm.tZ)(Badge.C,{key:el,color:el,fill:"outline"},"label")}))),(0,emotion_react_browser_esm.tZ)("div",{css:_ref8},color.map((function(el){return(0,emotion_react_browser_esm.tZ)(Badge.C,{key:el,color:el,dot:!0,fill:"outline"},"label")}))),(0,emotion_react_browser_esm.tZ)("div",{css:_ref7},color.map((function(el){return(0,emotion_react_browser_esm.tZ)(Badge.C,{key:el,color:el,fill:"transparent",dot:!0},"label")}))),(0,emotion_react_browser_esm.tZ)("div",{css:_ref6},(0,emotion_react_browser_esm.tZ)(Badge.C,{LeadingIcon:(0,emotion_react_browser_esm.tZ)(index_esm.nae,null)},"처리 중"),(0,emotion_react_browser_esm.tZ)(Badge.C,(0,esm_extends.Z)({},args,{LeadingIcon:(0,emotion_react_browser_esm.tZ)("img",{src:"https://res.cloudinary.com/tailwindcss/image/upload/v1635279277/nl_tpy2ab.svg",alt:"nl",width:"16",height:"16"})}),"Label"),(0,emotion_react_browser_esm.tZ)(Badge.C,(0,esm_extends.Z)({},args,{TrailingIcon:(0,emotion_react_browser_esm.tZ)(index_esm.Rgz,null)}),"Label"),(0,emotion_react_browser_esm.tZ)(Badge.C,{size:"lg",LeadingIcon:(0,emotion_react_browser_esm.tZ)(index_esm.nae,null),TrailingIcon:(0,emotion_react_browser_esm.tZ)(index_esm.Rgz,null)},"error, sm")))}.bind({});Default.args={size:"md",darkMode:!1},Default.parameters={controls:{exclude:["LeadingIcon","TrailingIcon","className"]}};var _ref={name:"g46w8s",styles:"margin-bottom:30px"},_ref2={name:"g46w8s",styles:"margin-bottom:30px"},_ref3={name:"g46w8s",styles:"margin-bottom:30px"},_ref4={name:"g46w8s",styles:"margin-bottom:30px"},_ref5={name:"15uhzwb",styles:"display:inline-flex;flex-direction:column;&>span+span{margin-top:1.25rem;}"},TextBadgeCase=function StoryTextBadge(args){return(0,emotion_react_browser_esm.tZ)(StoryLayout.Z,(0,esm_extends.Z)({},args,{customCss:_ref5}),(0,emotion_react_browser_esm.tZ)("div",{css:_ref4},(0,emotion_react_browser_esm.tZ)(TextBadge,{text:"토마토 소스 면적",color:"red"})),(0,emotion_react_browser_esm.tZ)("div",{css:_ref3},(0,emotion_react_browser_esm.tZ)(TextBadge,{text:"100점~70점",color:"blue"})),(0,emotion_react_browser_esm.tZ)("div",{css:_ref2},(0,emotion_react_browser_esm.tZ)(TextBadge,{text:"70점~50점",color:"yellow"})),(0,emotion_react_browser_esm.tZ)("div",{css:_ref},(0,emotion_react_browser_esm.tZ)(TextBadge,{text:"50점~0점",color:"orange"})))}.bind({});Default.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},Default.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_Default$parameters=Default.parameters)||void 0===_Default$parameters?void 0:_Default$parameters.docs),{},{source:(0,objectSpread2.Z)({originalSource:'args => {\n  return <StoryLayout {...args} customCss={css`\n        display: inline-flex;\n        flex-direction: column;\n        & > span + span {\n          margin-top: 1.25rem; /* Corresponds to space-y-5 in Tailwind CSS */\n        }\n      `}>\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        <Badge color="orange" size="circle">\n          N\n        </Badge>\n      </div>\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        {color.map(el => <Badge key={el} color={el} dot size="lg">\n            label\n          </Badge>)}\n      </div>\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        {color.map(el => <Badge key={el} color={el} dot>\n            label\n          </Badge>)}\n      </div>\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        {color.map(el => <Badge key={el} color={el} size="sm" dot>\n            label\n          </Badge>)}\n      </div>\n      {/* dot 없을때 */}\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        {color.map(el => <Badge key={el} color={el} size="lg">\n            label\n          </Badge>)}\n      </div>\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        {color.map(el => <Badge key={el} color={el}>\n            label\n          </Badge>)}\n      </div>\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        {color.map(el => <Badge key={el} color={el} size="sm">\n            label\n          </Badge>)}\n      </div>\n      {/* dot 없을때 */}\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        {color.map(el => <Badge key={el} color={el} fill="outline">\n            label\n          </Badge>)}\n      </div>\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        {color.map(el => <Badge key={el} color={el} dot fill="outline">\n            label\n          </Badge>)}\n      </div>\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        {color.map(el => <Badge key={el} color={el} fill="transparent" dot>\n            label\n          </Badge>)}\n      </div>\n\n      <div css={css`\n          display: flex;\n          margin-bottom: 10px;\n          span {\n            margin-right: 10px;\n          }\n        `}>\n        <Badge LeadingIcon={<FiStar />}>처리 중</Badge>\n        <Badge {...args} LeadingIcon={<img src="https://res.cloudinary.com/tailwindcss/image/upload/v1635279277/nl_tpy2ab.svg" alt="nl" width="16" height="16" />}>\n          Label\n        </Badge>\n        <Badge {...args} TrailingIcon={<FiArrowRight />}>\n          Label\n        </Badge>\n        <Badge size="lg" LeadingIcon={<FiStar />} TrailingIcon={<FiArrowRight />}>\n          error, sm\n        </Badge>\n      </div>\n\n      {/* <Badge variant="numbering" size="xs">\n        1\n       </Badge>\n       <Badge variant="black" size="sm" textWhite>\n        처리 중\n       </Badge>\n       <Badge {...args}>처리 중</Badge>\n       <Badge variant="gray">처리 중</Badge>\n       <Badge variant="success" size="lg" LeadingIcon={<FiStar />}>\n        TEXT\n       </Badge>\n       <Badge {...args} LeadingIcon={<FiStar />}>\n        Label\n       </Badge>\n       <Badge\n        {...args}\n        LeadingIcon={\n          <img\n            src="https://res.cloudinary.com/tailwindcss/image/upload/v1635279277/nl_tpy2ab.svg"\n            alt="nl"\n            width="16"\n            height="16"\n          />\n        }\n       >\n        Label\n       </Badge>\n       <Badge {...args} TrailingIcon={<FiArrowRight />}>\n        Label\n       </Badge>\n       <Badge\n        variant="error"\n        size="lg"\n        LeadingIcon={<FiStar />}\n        TrailingIcon={<FiArrowRight />}\n       >\n        error, sm\n       </Badge> */}\n    </StoryLayout>;\n}'},null===(_Default$parameters2=Default.parameters)||void 0===_Default$parameters2||null===(_Default$parameters2$=_Default$parameters2.docs)||void 0===_Default$parameters2$?void 0:_Default$parameters2$.source)})}),TextBadgeCase.parameters=(0,objectSpread2.Z)((0,objectSpread2.Z)({},TextBadgeCase.parameters),{},{docs:(0,objectSpread2.Z)((0,objectSpread2.Z)({},null===(_TextBadgeCase$parame=TextBadgeCase.parameters)||void 0===_TextBadgeCase$parame?void 0:_TextBadgeCase$parame.docs),{},{source:(0,objectSpread2.Z)({originalSource:'args => {\n  return <StoryLayout {...args} customCss={css`\n        display: inline-flex;\n        flex-direction: column;\n        & > span + span {\n          margin-top: 1.25rem; /* Corresponds to space-y-5 in Tailwind CSS */\n        }\n      `}>\n      <div css={css`\n          margin-bottom: 30px;\n        `}>\n        <TextBadge text="토마토 소스 면적" color="red" />\n      </div>\n      <div css={css`\n          margin-bottom: 30px;\n        `}>\n        <TextBadge text="100점~70점" color="blue" />\n      </div>\n      <div css={css`\n          margin-bottom: 30px;\n        `}>\n        <TextBadge text="70점~50점" color="yellow" />\n      </div>\n      <div css={css`\n          margin-bottom: 30px;\n        `}>\n        <TextBadge text="50점~0점" color="orange" />\n      </div>\n    </StoryLayout>;\n}'},null===(_TextBadgeCase$parame2=TextBadgeCase.parameters)||void 0===_TextBadgeCase$parame2||null===(_TextBadgeCase$parame3=_TextBadgeCase$parame2.docs)||void 0===_TextBadgeCase$parame3?void 0:_TextBadgeCase$parame3.source)})})}}]);